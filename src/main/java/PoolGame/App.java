/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import PoolGame.Items.Pocket;
import PoolGame.Items.PoolTable;
import PoolGame.Memento.Caretaker;
import PoolGame.Memento.Memento;
import PoolGame.Levels.DefaultLevel;
import PoolGame.Levels.EasyLevel;
import PoolGame.Levels.HardLevel;
import PoolGame.Levels.NormalLevel;
import javafx.scene.input.KeyCode;
import org.json.simple.parser.ParseException;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.stage.Stage;
import javafx.util.Duration;

/** The JavaFX application */
public class App extends Application {

    private static final double FRAMETIME = 1.0 / 60.0;

    private Caretaker caretaker = new Caretaker();

    private boolean isCheat = false;

    private static HashMap<Character, String> colMap = new HashMap<Character, String>();

    private ConfigReader loadConfig(List<String> args) {
        String configPath;
        boolean isResourcesDir = false;
		if (args.size() > 0) {
			configPath = args.get(0);
		} else {
//			 configPath = "src/main/resources/config_easy.json";
			configPath = "/config.json";
            isResourcesDir = true;
		}
		// parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ParseException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ConfigKeyMissingException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }

    /**
     * Set the game state according to the key press by the user
     * @param stage
     * @param root
     * @param game
     */
    private void setKeyBoardPress(Stage stage,Group root, Game game) {
        stage.getScene().setOnKeyPressed(e -> {

            if (e.getCode() == KeyCode.C) {
                if (isCheat) {
                    System.out.println("Cheat has been Deactivate!!!");

                    isCheat = false;
                } else {
                    System.out.println("Cheat has been Activated!!!");
                    this.isCheat = true;
                }
            }
            if (isCheat && checkKeyCode(e.getCode())) {
                game.notifyCheat(colMap.get((char) e.getCode().getCode()));
            } else {
                if (e.getCode() == KeyCode.Q) {
                    restart(stage, new EasyLevel().getState());
                } else if (e.getCode() == KeyCode.W) {
                    restart(stage, new NormalLevel().getState());
                } else if (e.getCode() == KeyCode.E) {
                    restart(stage, new HardLevel().getState());
                } else if (e.getCode() == KeyCode.A) {
                    Memento memento = this.caretaker.get();
                    if (memento == null) {
                        System.out.println("There is no snapshot!!");
                    } else {
                        root.getChildren().clear();
                        restore(game, memento);
                        game.addDrawables(root);
                    }

                } else if (e.getCode() == KeyCode.S) {
                    this.caretaker.add(saveStateToMemento(game));
                }
            }

        });
    }

    /**
     * Clean up the game stage
     * @param stage
     */
    void cleanup(Stage stage) {
        // stop animations reset model ect.
        stage.close();
    }

    /**
     * Restart the game and replace with the new level
     * @param stage
     * @param config
     */
    void restart(Stage stage, ConfigReader config) {
        cleanup(stage);
        startGame(stage, config);
    }

    @Override
    public void start(Stage primaryStage) {
        startGame(primaryStage, new DefaultLevel().getState());
    }

    /**
     * Start the game with the given config
     * @param stage the stage of the game
     * @param config the config class generate from json file
     */
    public void startGame(Stage stage, ConfigReader config) {
        Group root = new Group();
        Scene scene = new Scene(root);

        stage.setScene(scene);
        stage.setTitle("PoolGame");
        stage.show();
        
//        ConfigReader config = loadConfig(getParameters().getRaw());

        Game game = new Game(config);
        
        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        stage.setWidth(game.getWindowDimX());
        stage.setHeight(game.getWindowDimY() +
                        Pocket.RADIUS +
                        PoolTable.POCKET_OFFSET +
                        4 ); // Magic number to get bottom to align

        root.getChildren().add(canvas);
        // GraphicsContext gc = canvas.getGraphicsContext2D();
        game.addDrawables(root);
        
        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME),
        (actionEvent) -> {
                this.setKeyBoardPress(stage, root, game);
                game.tick();
            });
        timeline.getKeyFrames().add(frame);
        timeline.play();

    }


    /**
     * The entry point of the program
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        colMap.put('1', "red");
        colMap.put('2', "yellow");
        colMap.put('3', "green");
        colMap.put('4', "brown");
        colMap.put('5', "blue");
        colMap.put('6', "purple");
        colMap.put('7', "black");
        colMap.put('8', "orange");
        launch(args);
    }

    /**
     * save the game as memento
     * @param game
     * @return the Memento of game state
     */
    private Memento saveStateToMemento(Game game) {
        return new Memento(new Game(game));
    }


    /**
     *
     * @return the Frame rate of the game
     */
    public static double getFRAMETIME() {
        return FRAMETIME;
    }

    /**
     * Check if the keys are pressed or not
     * @param e keycode
     * @return true if the specific key is press else false
     */
    private boolean checkKeyCode(KeyCode e) {
        for (char i: colMap.keySet()) {
            if ((char) e.getCode() == i) {
                return true;
            }
        }
        return false;
    }

    /**
     * Restore the game back to when it saved
     * @param game
     * @param memento
     */
    private void restore(Game game, Memento memento) {
        game.setStopWatch(memento.getSnapshot().getStopWatch());
        game.setTotalGameScore(memento.getSnapshot().getTotalGameScore());
        game.setTable(memento.getSnapshot().getPoolTable());
        game.setText(memento.getSnapshot());
    }

}
